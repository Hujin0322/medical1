#함수선언 def 이름()
#함수 호출: 이름()
#함수 선언(매개 변수 개수 맞춰야 함): def 이름(매개변수)-> 이름(매개변수)
#리턴 개수와는 상관 없음.
#리턴의 결과값을 받지 않아도 되지만, 리턴의 개수는 맞춰야 함.
#함수내의 변수는 지역변수이므로, 함수 종료 시 사라짐.
#함수내의 변경된 변수값을 전역변수에 반영하기 위해선 return으로 돌려워야 함. --> 주로 사용해야 함.
#함수내 global이라고 하면, 전역변수에 선언되어 있는 변수주소를 가져와 return 사용하지 않아도 가능. --> 참고만
#매개변수 리스트 or 딕셔너리 사용 시 return필요X
def func1(a,a_list):
    a=100 #지역변수
    a_list[0]=100 #지역변수
    return a

a=10
a_list=[1,2,3] #전역변수
a=func1(a, a_list) #2개 이상의 데이터를 저장하는 변수는 주소값을 저장함.

#데이터 출력
print(a)
print(a_list)



# def func1():
#     global a #-> 전역변수를 가져옴.
#     a=100 #지역변수
#     print('func1 a=',a)
#     #지역변구 값을 전역변수에 적용 시키는 방법
#     #코드 추가

# #전역변수의 값 호출    
# def func2():
#     print('func2 b=',a+10)

# #전역변수
# a=20   

# func1()
# func2()
# print('결과값:',a)


# def cal(v1,sum): #지역변수: 함수 내에서만
#     sum=sum+500
#     v1=200
#     return v1, sum
# sum=10
# v1=100 #전역변수
# v1=cal(v1,sum)
# print(v1)
# print(sum)